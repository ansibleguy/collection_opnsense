---

- name: Cleaning up firewall config
  hosts: localhost
  gather_facts: no
  vars:
    run:
      f: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      c: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"

  tasks:
    - name: Cleanup Rules
      ansibleguy.opnsense.rule_purge:
        force_all: true
        match_fields: ['description']
        key_field: 'description'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup Aliases
      ansibleguy.opnsense.alias_purge:
        force_all: true
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup packages
      ansibleguy.opnsense.package:
        name: ['os-api-backup', 'os-dmidecode']
        action: "{{ item }}"
        timeout: 60
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      diff: false
      loop:
        - 'unlock'
        - 'remove'

    - name: Cleanup cron jobs
      ansibleguy.opnsense.cron:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1'
        - 'ANSIBLE_TEST_2'

    - name: Cleanup routes
      ansibleguy.opnsense.route:
        description: "{{ item }}"
        network: '192.168.0.0/32'
        gateway: 'LAN_GW'
        state: 'absent'
        match_fields: ['description']
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1'
        - 'ANSIBLE_TEST_2'

    - name: Cleanup DNS-over-TLS
      ansibleguy.opnsense.unbound_dot:
        domain: "{{ item.d }}"
        target: "{{ item.t }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - {d: 'dot.opnsense.test.ansibleguy.net', t: '1.1.1.1'}
        - {d: 'dot.opnsense.test.ansibleguy.net', t: '1.1.1.2'}

    - name: Cleanup DNS-Forwardings
      ansibleguy.opnsense.unbound_forward:
        domain: "{{ item.d }}"
        target: "{{ item.t }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - {d: 'fwd.opnsense.test.ansibleguy.net', t: '1.1.1.1'}
        - {d: 'fwd.opnsense.test.ansibleguy.net', t: '1.1.1.2'}
        - {d: '', t: '1.1.1.3'}

    - name: Cleanup DNS host-override aliases
      ansibleguy.opnsense.unbound_host_alias:
        description: "{{ item }}"
        alias: 'dummy'
        domain: 'dummy'
        state: 'absent'
        match_fields: ['description']
        timeout: 60
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup DNS host-overrides
      ansibleguy.opnsense.unbound_host:
        description: "{{ item }}"
        hostname: 'dummy'
        domain: 'dummy'
        state: 'absent'
        match_fields: ['description']
        timeout: 60
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup DNS domain-overrides
      ansibleguy.opnsense.unbound_domain:
        description: "{{ item }}"
        domain: 'dummy.local'
        server: '192.168.0.1'
        state: 'absent'
        match_fields: ['description']
        timeout: 60
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_1_3'

    - name: Cleanup syslog
      ansibleguy.opnsense.syslog:
        description: "{{ item }}"
        target: '192.168.0.1'
        state: 'absent'
        match_fields: ['description']
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1'
        - 'ANSIBLE_TEST_2'
        - 'ANSIBLE_TEST_3'

    - name: Cleanup ipsec certs
      ansibleguy.opnsense.ipsec_cert:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup shaper pipes
      ansibleguy.opnsense.shaper_pipe:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'
        - 'ANSIBLE_TEST_3_1'

    - name: Cleanup shaper queues
      ansibleguy.opnsense.shaper_queue:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup shaper rules
      ansibleguy.opnsense.shaper_rule:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup monit services
      ansibleguy.opnsense.monit_service:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_1_3'
        - 'ANSIBLE_TEST_1_4'

    - name: Cleanup monit alerts
      ansibleguy.opnsense.monit_alert:
        recipient: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'alert@monit.opnsense.test.ansibleguy.net'
        - 'alert2@monit.opnsense.test.ansibleguy.net'

    - name: Cleanup monit tests
      ansibleguy.opnsense.monit_test:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup wireguard servers
      ansibleguy.opnsense.wireguard_server:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup wireguard peers
      ansibleguy.opnsense.wireguard_peer:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup wireguard general
      ansibleguy.opnsense.wireguard_general:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup VIPs
      ansibleguy.opnsense.interface_vip:
        interface: "{{ item.int }}"
        address: "{{ item.ip }}"
        state: 'absent'
      loop:
        - {int: 'lan', ip: '192.168.1.1'}
        - {int: 'opt1', ip: '192.168.2.1'}

    - name: Cleanup vlan interfaces
      ansibleguy.opnsense.interface_vlan:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup vxlan interfaces
      ansibleguy.opnsense.interface_vxlan:
        id: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 100
        - 101

    - name: Cleanup source-nat
      ansibleguy.opnsense.source_nat:
        description: "{{ item }}"
        state: 'absent'
        match_fields: ['description']
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup FRR BFD general settings
      ansibleguy.opnsense.frr_bfd_general:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup FRR BFD neighbors
      ansibleguy.opnsense.frr_bfd_neighbor:
        ip: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - '10.0.0.1'
        - '10.0.0.0/28'

    - name: Cleanup FRR BGP general settings
      ansibleguy.opnsense.frr_bgp_general:
        as_number: 1337
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup FRR BGP neighbors
      ansibleguy.opnsense.frr_bgp_neighbor:
        description: "{{ item }}"
        state: 'absent'
        match_fields: ['description']
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'
        - 'ANSIBLE_TEST_2_2'

    - name: Cleanup FRR BGP route-maps
      ansibleguy.opnsense.frr_bgp_route_map:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'
        - 'ANSIBLE_TEST_2_2'
        - 'ANSIBLE_TEST_3_1'

    - name: Cleanup FRR BGP prefix lists
      ansibleguy.opnsense.frr_bgp_prefix_list:
        name: "{{ item.n }}"
        seq: "{{ item.s | default(omit) }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - {'n': 'ANSIBLE_TEST_1_1', 's': 55}
        - {'n': 'ANSIBLE_TEST_1_2', 's': 56}
        - {'n': 'ANSIBLE_TEST_1_2', 's': 57}
        - {'n': 'ANSIBLE_TEST_2_1', 's': 50}
        - {'n': 'ANSIBLE_TEST_2_1', 's': 51}
        - {'n': 'ANSIBLE_TEST_3_1', 's': 50}
        - {'n': 'ANSIBLE_TEST_3_1', 's': 51}

    - name: Cleanup FRR BGP community lists
      ansibleguy.opnsense.frr_bgp_community_list:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup FRR BGP as paths
      ansibleguy.opnsense.frr_bgp_as_path:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup OSPF general settings
      ansibleguy.opnsense.frr_ospf_general:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup OSPFv3 general settings
      ansibleguy.opnsense.frr_ospf3_general:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup OSPFv3 interfaces
      ansibleguy.opnsense.frr_ospf3_interface:
        interface: "{{ item }}"
        state: 'absent'
        match_fields: ['interface']
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'opt1'
        - 'lan'

    - name: Cleanup OSPF route-maps
      ansibleguy.opnsense.frr_ospf_route_map:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup OSPF networks
      ansibleguy.opnsense.frr_ospf_network:
        ip: "{{ item.ip }}"
        mask: "{{ item.mask }}"
        state: 'absent'
        match_fields: ['ip', 'mask']
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - {'ip': '10.0.1.0', 'mask': 30}
        - {'ip': '10.0.2.0', 'mask': 24}
        - {'ip': '10.0.3.0', 'mask': 24}

    - name: Cleanup OSPF prefix-lists
      ansibleguy.opnsense.frr_ospf_prefix_list:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'
        - 'ANSIBLE_TEST_3_1'

    - name: Cleanup BIND general settings
      ansibleguy.opnsense.bind_general:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup BIND blocklist settings
      ansibleguy.opnsense.bind_blocklist:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup BIND Records
      ansibleguy.opnsense.bind_record_multi:
        records:
          'test4.ansibleguy':
            - 'test1'
            - name: 'test1'
              type: 'TXT'
            - 'test2'
            - name: 'test2'
              type: 'TXT'
            - 'test3'
            - name: 'test4'
              type: 'CNAME'
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      ignore_errors: true  # domain does not exist

    - name: Cleanup BIND Domains
      ansibleguy.opnsense.bind_domain:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'test1.ansibleguy'
        - 'test2.ansibleguy'
        - 'test3.ansibleguy'
        - 'test4.ansibleguy'

    - name: Cleanup BIND ACLs
      ansibleguy.opnsense.bind_acl:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'
        - 'ANSIBLE_TEST_2_2'
        - 'ANSIBLE_TEST_3_1'
        - 'ANSIBLE_TEST_3_2'
      when: not ansible_check_mode

    - name: Cleanup WebProxy General
      ansibleguy.opnsense.webproxy_general:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy Cache
      ansibleguy.opnsense.webproxy_cache:
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy Parent
      ansibleguy.opnsense.webproxy_parent:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy Traffic
      ansibleguy.opnsense.webproxy_traffic:
        enabled: false
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy Forward
      ansibleguy.opnsense.webproxy_forward:
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy ACL
      ansibleguy.opnsense.webproxy_acl:
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy ICAP
      ansibleguy.opnsense.webproxy_icap:
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
        enabled: false

    - name: Cleanup WebProxy Auth
      ansibleguy.opnsense.webproxy_auth:
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false

    - name: Cleanup WebProxy Remote-ACLs
      ansibleguy.opnsense.webproxy_remote_acl:
        file: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLETEST1'
        - 'ANSIBLETEST2'

    - name: Cleanup WebProxy PAC-Rule
      ansibleguy.opnsense.webproxy_pac_rule:
        description: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'

    - name: Cleanup WebProxy PAC-Proxy
      ansibleguy.opnsense.webproxy_pac_proxy:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'

    - name: Cleanup WebProxy PAC-Match
      ansibleguy.opnsense.webproxy_pac_match:
        name: "{{ item }}"
        state: 'absent'
        firewall: "{{ run.f }}"
        api_credential_file: "{{ run.c }}"
        ssl_verify: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_2_1'
